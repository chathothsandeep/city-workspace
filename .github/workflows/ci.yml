name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file from secret
        run: |
          mkdir -p apps/backend
          echo "${{ secrets.ENV_FILE }}" > apps/backend/.env

      - name: Build Backend Image
        run: |
          docker build -t city-be -f apps/backend/Dockerfile .

      - name: Build Frontend Image
        run: |
          docker build -t city-fe -f apps/dashboard/Dockerfile .

      - name: Save Backend Image to File
        run: |
          docker save city-be | gzip > city-be.tar.gz

      - name: Save Frontend Image to File
        run: |
          docker save city-fe | gzip > city-fe.tar.gz

      - name: Transfer files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "city-be.tar.gz,city-fe.tar.gz,k8s"
          target: "/home/ubuntu"
          strip_components: 0

      - name: Deploy via SSH on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu

            # Load Docker images
            sudo  docker load -i city-be.tar.gz
            sudo docker load -i city-fe.tar.gz

            # Clean up tarballs
            sudo rm city-be.tar.gz city-fe.tar.gz

            # Apply Kubernetes manifests
            kubectl apply -f k8s/

            # Wait for rollout to complete
            kubectl rollout status deployment/city-backend -n city-ns --timeout=300s
            kubectl rollout status deployment/city-frontend -n city-ns --timeout=300s

            # Clean up k8s files
            sudo rm -rf k8s

