name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file from secret
        run: |
          mkdir -p apps/backend
          echo "${{ secrets.ENV_FILE }}" > apps/backend/.env

      - name: Define image tags
        id: set-image-tags
        run: |
          echo "BE_PROD_IMAGE_PATH=city-be:${{ github.sha }}" >> $GITHUB_ENV
          echo "FE_PROD_IMAGE_PATH=city-fe:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Backend Image
        run: |
          docker build -t $BE_PROD_IMAGE_PATH -f apps/backend/Dockerfile .

      - name: Build Frontend Image
        run: |
          docker build -t $FE_PROD_IMAGE_PATH -f apps/dashboard/Dockerfile .

      - name: Save Backend Image to File
        run: |
          docker save $BE_PROD_IMAGE_PATH | gzip > city-be.tar.gz

      - name: Save Frontend Image to File
        run: |
          docker save $FE_PROD_IMAGE_PATH | gzip > city-fe.tar.gz

      - name: Update image paths in Kubernetes manifests
        run: |
          sed -i "s|__BE_IMAGE_PATH__|$BE_PROD_IMAGE_PATH|g" k8s/be.yml
          sed -i "s|__FE_IMAGE_PATH__|$FE_PROD_IMAGE_PATH|g" k8s/fe.yml

      - name: Transfer files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "city-be.tar.gz,city-fe.tar.gz,k8s"
          target: "/home/ubuntu"
          strip_components: 0

      - name: Deploy via SSH on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu

            sudo docker load -i city-be.tar.gz
            sudo docker load -i city-fe.tar.gz

            sudo rm city-be.tar.gz city-fe.tar.gz

            kubectl apply -f k8s/
            kubectl rollout status deployment/be-city -n city-ns --timeout=300s
            kubectl rollout status deployment/fe-city -n city-ns --timeout=300s

            sudo rm -rf k8s

